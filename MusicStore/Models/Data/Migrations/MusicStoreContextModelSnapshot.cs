// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MusicStore.Models.Data;

#nullable disable

namespace MusicStore.Models.Data.Migrations
{
    [DbContext(typeof(MusicStoreContext))]
    partial class MusicStoreContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AlbumArtist", b =>
                {
                    b.Property<int>("AlbumsId")
                        .HasColumnType("int");

                    b.Property<int>("ArtistsId")
                        .HasColumnType("int");

                    b.HasKey("AlbumsId", "ArtistsId");

                    b.HasIndex("ArtistsId");

                    b.ToTable("AlbumArtist");
                });

            modelBuilder.Entity("MusicStore.Models.Data.DomainModels.Album", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AlbumTypeId")
                        .HasColumnType("int");

                    b.Property<string>("GenreId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<byte[]>("ImageData")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ImageType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AlbumTypeId");

                    b.HasIndex("GenreId");

                    b.ToTable("Albums");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AlbumTypeId = 1,
                            GenreId = "rock",
                            Price = 8.99m,
                            Title = "Revolver",
                            Year = 1966
                        });
                });

            modelBuilder.Entity("MusicStore.Models.Data.DomainModels.AlbumType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AlbumType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "LP"
                        },
                        new
                        {
                            Id = 2,
                            Name = "EP"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Single"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Split"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Compilation"
                        });
                });

            modelBuilder.Entity("MusicStore.Models.Data.DomainModels.Artist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("GenreId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GenreId");

                    b.ToTable("Artists");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsActive = false,
                            Name = "The Beatles"
                        });
                });

            modelBuilder.Entity("MusicStore.Models.Data.DomainModels.Genre", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = "rock",
                            Name = "Rock"
                        },
                        new
                        {
                            Id = "elec",
                            Name = "Electronic"
                        },
                        new
                        {
                            Id = "rap",
                            Name = "Hip Hop"
                        },
                        new
                        {
                            Id = "class",
                            Name = "Classical"
                        },
                        new
                        {
                            Id = "metal",
                            Name = "Metal"
                        },
                        new
                        {
                            Id = "indie",
                            Name = "Independent"
                        },
                        new
                        {
                            Id = "exp",
                            Name = "Experimental"
                        });
                });

            modelBuilder.Entity("MusicStore.Models.Data.DomainModels.Track", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AlbumId")
                        .HasColumnType("int");

                    b.Property<int>("ArtistId")
                        .HasColumnType("int");

                    b.Property<int>("DurationInSeconds")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TrackNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.ToTable("Tracks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AlbumId = 1,
                            ArtistId = 1,
                            DurationInSeconds = 159,
                            Title = "Taxman",
                            TrackNumber = 1
                        },
                        new
                        {
                            Id = 2,
                            AlbumId = 1,
                            ArtistId = 1,
                            DurationInSeconds = 129,
                            Title = "Eleanor Rigby",
                            TrackNumber = 2
                        },
                        new
                        {
                            Id = 3,
                            AlbumId = 1,
                            ArtistId = 1,
                            DurationInSeconds = 182,
                            Title = "I'm Only Sleeping",
                            TrackNumber = 3
                        },
                        new
                        {
                            Id = 4,
                            AlbumId = 1,
                            ArtistId = 1,
                            DurationInSeconds = 187,
                            Title = "Love You To",
                            TrackNumber = 4
                        },
                        new
                        {
                            Id = 5,
                            AlbumId = 1,
                            ArtistId = 1,
                            DurationInSeconds = 146,
                            Title = "Here, There And Everywhere",
                            TrackNumber = 5
                        },
                        new
                        {
                            Id = 6,
                            AlbumId = 1,
                            ArtistId = 1,
                            DurationInSeconds = 160,
                            Title = "Yellow Submarine",
                            TrackNumber = 6
                        },
                        new
                        {
                            Id = 7,
                            AlbumId = 1,
                            ArtistId = 1,
                            DurationInSeconds = 159,
                            Title = "She Said She Said",
                            TrackNumber = 7
                        },
                        new
                        {
                            Id = 8,
                            AlbumId = 1,
                            ArtistId = 1,
                            DurationInSeconds = 130,
                            Title = "Good Day Sunshine",
                            TrackNumber = 8
                        },
                        new
                        {
                            Id = 9,
                            AlbumId = 1,
                            ArtistId = 1,
                            DurationInSeconds = 123,
                            Title = "And Your Bird Can Sing",
                            TrackNumber = 9
                        },
                        new
                        {
                            Id = 10,
                            AlbumId = 1,
                            ArtistId = 1,
                            DurationInSeconds = 122,
                            Title = "For No One",
                            TrackNumber = 10
                        },
                        new
                        {
                            Id = 11,
                            AlbumId = 1,
                            ArtistId = 1,
                            DurationInSeconds = 137,
                            Title = "Doctor Robert",
                            TrackNumber = 11
                        },
                        new
                        {
                            Id = 12,
                            AlbumId = 1,
                            ArtistId = 1,
                            DurationInSeconds = 152,
                            Title = "I Want To Tell You",
                            TrackNumber = 12
                        },
                        new
                        {
                            Id = 13,
                            AlbumId = 1,
                            ArtistId = 1,
                            DurationInSeconds = 157,
                            Title = "Got to Get You Into My Life",
                            TrackNumber = 13
                        },
                        new
                        {
                            Id = 14,
                            AlbumId = 1,
                            ArtistId = 1,
                            DurationInSeconds = 177,
                            Title = "Tomorrow Never Knows",
                            TrackNumber = 14
                        });
                });

            modelBuilder.Entity("AlbumArtist", b =>
                {
                    b.HasOne("MusicStore.Models.Data.DomainModels.Album", null)
                        .WithMany()
                        .HasForeignKey("AlbumsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MusicStore.Models.Data.DomainModels.Artist", null)
                        .WithMany()
                        .HasForeignKey("ArtistsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MusicStore.Models.Data.DomainModels.Album", b =>
                {
                    b.HasOne("MusicStore.Models.Data.DomainModels.AlbumType", "AlbumType")
                        .WithMany("Albums")
                        .HasForeignKey("AlbumTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MusicStore.Models.Data.DomainModels.Genre", "Genre")
                        .WithMany("Albums")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AlbumType");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("MusicStore.Models.Data.DomainModels.Artist", b =>
                {
                    b.HasOne("MusicStore.Models.Data.DomainModels.Genre", null)
                        .WithMany("Artists")
                        .HasForeignKey("GenreId");
                });

            modelBuilder.Entity("MusicStore.Models.Data.DomainModels.Track", b =>
                {
                    b.HasOne("MusicStore.Models.Data.DomainModels.Album", null)
                        .WithMany("Tracks")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MusicStore.Models.Data.DomainModels.Album", b =>
                {
                    b.Navigation("Tracks");
                });

            modelBuilder.Entity("MusicStore.Models.Data.DomainModels.AlbumType", b =>
                {
                    b.Navigation("Albums");
                });

            modelBuilder.Entity("MusicStore.Models.Data.DomainModels.Genre", b =>
                {
                    b.Navigation("Albums");

                    b.Navigation("Artists");
                });
#pragma warning restore 612, 618
        }
    }
}
